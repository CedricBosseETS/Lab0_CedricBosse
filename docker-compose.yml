services:
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    restart: always
    
  app:
    build: .
    environment:
      PYTHONPATH: /app/src
      DJANGO_SETTINGS_MODULE: src.caisse_django.settings
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      ALLOWED_HOSTS: 'app,nginx,localhost,127.0.0.1'
      APP_REPLICAS: ${APP_REPLICAS:-2}
    expose:
      - "5000"
    depends_on:
      - db
    volumes:
      - .:/app:rw
    restart: unless-stopped
    networks:
      - backend

  nginx:
    image: nginx:latest
    ports:
      - '5000:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - backend

  db:
    image: mysql:8.3
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    restart: unless-stopped
    networks:
      - backend

  stock_service:
    build: ./src/stock_service/
    environment:
      PYTHONPATH: /app/src
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      ALLOWED_HOSTS: 'app,nginx,localhost,127.0.0.1'
    expose:
      - "5000"
    depends_on:
      - db
      - produit_service
    restart: unless-stopped
    networks:
      - backend

  reporting_service:
    build: ./src/reporting_service/
    environment:
      PYTHONPATH: /app/src
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      ALLOWED_HOSTS: 'app,nginx,localhost,127.0.0.1,reporting_service'
    expose:
      - "5000"   
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - backend

  produit_service:
    build: ./src/produit_service/
    environment:
      PYTHONPATH: /app/src
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      ALLOWED_HOSTS: 'app,nginx,localhost,127.0.0.1,produit_service'
    expose:
      - "5000"    
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - backend

  # vente_service:
  #   build: ./src/vente_service/
  #   environment:
  #     PYTHONPATH: /app/src
  #     DB_HOST: db
  #     DB_NAME: ${DB_NAME}
  #     DB_USER: ${DB_USER}
  #     DB_PASSWORD: ${DB_PASSWORD}
  #     ALLOWED_HOSTS: 'app,nginx,localhost,127.0.0.1'
  #   expose:
  #     - "5000"    
  #   depends_on:
  #     - db
  #   restart: unless-stopped
  #   networks:
  #     - backend

  # panier_service:
  #   build: ./src/panier_service/
  #   environment:
  #     PYTHONPATH: /app/src
  #     DB_HOST: db
  #     DB_NAME: ${DB_NAME}
  #     DB_USER: ${DB_USER}
  #     DB_PASSWORD: ${DB_PASSWORD}
  #     ALLOWED_HOSTS: 'app,nginx,localhost,127.0.0.1'
  #   expose:
  #     - "5000"    
  #   depends_on:
  #     - db
  #   restart: unless-stopped
  #   networks:
  #     - backend

  prometheus:
    image: prom/prometheus:latest
    user: root  
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro 
    ports:
      - '9090:9090'
    restart: unless-stopped
    networks:
      - backend

  grafana:
    image: grafana/grafana:9.5.0
    depends_on:
      - prometheus
    ports:
      - '3000:3000'
    environment:
      GF_SECURITY_ADMIN_PASSWORD: 'secret'
      GF_USERS_ALLOW_SIGN_UP: 'false'
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - backend
  

volumes:
  mysql_data:
  grafana_data:

networks:
  backend:
    driver: bridge
